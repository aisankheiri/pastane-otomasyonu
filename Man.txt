-------------------------------------------------------------
               PASTANE OTOMASYON SİSTEMİ
-------------------------------------------------------------

Yazar: Aisan Kheiri
Öğrenci No : 170420995

-------------------------------------------------------------
İçindekiler
-------------------------------------------------------------

1. Proje Hakkında
2. Kullanılan Teknolojiler
3. Kurulum
4. Kullanım
5. Katkıda Bulunma
6. Koda dair kısa açıklama
7. Kod çıktısı
8. Bellek Kullanımı, Zombie Süreçleri ve Diğer Sorunların Analizi
9. Lisans

-------------------------------------------------------------
1. Proje Hakkında
-------------------------------------------------------------

Bu program, birden fazla ustanın bir pastayı yapmak için işbirliği yaptığı bir simülasyonu gerçekleştirir. Her bir usta, belirli malzemelerin bulunup bulunmadığını kontrol eder, ardından gerekli malzemelerin temin edilmesi için toptancıya talepte bulunur. Pastanın yapılması için gerekli tüm malzemeler toplandıktan sonra pastanın yapımı gerçekleştirilir ve pastanın tamamlandığına dair bir işaret verilir.

-------------------------------------------------------------
2. Kullanılan Teknolojiler
-------------------------------------------------------------

- C Programlama Dili
- POSIX Semaforları

-------------------------------------------------------------
3. Kurulum
-------------------------------------------------------------

Bu programın çalışması için aşağıdaki gereksinimlerin karşılanması gerekmektedir:

- C derleyici
- POSIX uyumlu bir işletim sistemi (ör. Linux)

Kurulum adımları şu şekildedir:

1. Depodaki "170420995_pasta.c" dosyasını indirin.
2. Terminali açarak, programın bulunduğu dizine gidin.
3. Aşağıdaki komutu kullanarak programı derleyin:
gcc -o pastane 170420995_pasta.c -lpthread

4. Derleme işlemi tamamlandıktan sonra, oluşturulan "pastane" adlı yürütülebilir dosyayı çalıştırın:
./pastane -i malzemeler.txt

-------------------------------------------------------------
4. Kullanım
-------------------------------------------------------------

Programı başarıyla çalıştırdıktan sonra, pastane otomasyon sistemi etkin hale gelecektir. Program, toptancı ve ustalar arasındaki işlemleri senkronize edecektir. Sistemdeki usta sayısı ve kullanılabilir malzeme miktarı, program başlatılmadan önce "170420995_pasta.c" dosyasında ayarlanabilir.

-------------------------------------------------------------
5. Katkıda Bulunma
-------------------------------------------------------------

Bu proje açık kaynaklıdır ve katkıda bulunmaktan memnuniyet duyarım. Eğer projeye katkıda bulunmak isterseniz:

1. Fork yapın (https://github.com/aisankheiri/pastane-otomasyonu/fork)
2. Yeni bir dal oluşturun (git checkout -b feature/featureAdi)
3. Değişikliklerinizi yapın
4. Değişikliklerinizi commit edin (git commit -am 'Yaptığınız değişiklikler')
5. Dalınıza push yapın (git push origin feature/featureAdi)
6. Bir Pull Talebi (Pull Request) oluşturun

-------------------------------------------------------------
6. Koda dair kısa açıklama
-------------------------------------------------------------

Kodun Adımları:

    Giriş (int giris()):
        Her usta için hangi malzemelere sahip olduğunu kontrol eder ve ekrana yazar.

    Ana İşlev (int main(int argc, char argv[])):
        Komut satırı argümanlarını kontrol eder.
        giris() fonksiyonunu çağırır.
        Semaforları başlatır:
            ingredient_available: Malzemelerin kullanılabilir olduğunu gösterir.
            ingredient_taken: Malzemelerin alındığını gösterir.
            cake_ready: Pastanın hazır olduğunu gösterir.
        6 usta için thread oluşturur:
            Her thread master_thread() fonksiyonunu çalıştırır.
            Her thread'e usta kimliği gönderilir.
        Toptancı thread'ini oluşturur:
            toptanci_thread_func() fonksiyonunu çalıştırır.
        Toptancı thread'inin bitmesini bekler.
        Usta thread'lerinin bitmesini bekler.
        Semaforları temizler.
        Programdan çıkar.

    Usta Thread'i (master_thread(void* arg)):
        Usta rastgele bir süre uyur.
        Gerekli malzemeleri talep eder ve ekrana yazar.
        Malzemeleri almak için bekler.
        Malzemeleri kullanır.
        Malzemeleri bırakır ve pastanın hazır olduğunu bildirir.
        Pastayı alır ve thread sona erer.

    Toptancı Thread'i (toptanci_thread_func(void* arg)):
        Malzemeleri teslim eder.
        Malzemelerin alınıncaya kadar bekler.
        Pastayı alır ve satmaya gider.
        Tüm ustalara pastanın hazır olduğunu bildirir.
        Thread sona erer.

Kodun Önemli Noktaları:

    Semaforlar, birden fazla thread'in aynı kaynaklara (örneğin, malzemeler) güvenli bir şekilde erişmesini sağlar.
    Her usta, hangi malzemelere sahip olduğunu kontrol eder ve eksik olanları talep eder.
    Toptancı, ustalara ihtiyaç duydukları malzemeleri temin eder.
    Ustalar, pastayı tamamladıktan sonra toptancıdan pastayı alırlar.
    Program, tüm ustalar ve toptancı thread'i bittiğinde sona erer.

-------------------------------------------------------------
7. Kod çıktısı
-------------------------------------------------------------

Usta 1:
  - Yumurta var
  - Süt yok
  - Un var
  - Kakao yok
Usta 2:
  - Yumurta yok
  - Süt var
  - Un yok
  - Kakao var
Usta 3:
  - Yumurta var
  - Süt var
  - Un yok
  - Kakao yok
Usta 4:
  - Yumurta yok
  - Süt var
  - Un var
  - Kakao yok
Usta 5:
  - Yumurta var
  - Süt yok
  - Un yok
  - Kakao var
Usta 6:
  - Yumurta yok
  - Süt yok
  - Un var
  - Kakao var
---- Kim daha erken uykudan uyanirsa o ilk siraya girer ----
	            Usta 1, 4 saniye uyuyor.
	            Usta 2, 2 saniye uyuyor.
	            Usta 3, 3 saniye uyuyor.
	            Usta 4, 1 saniye uyuyor.
	            Usta 5, 4 saniye uyuyor.
	            Usta 6, 1 saniye uyuyor.
Usta 4--> YUMURTA  KAKAO  malzemelerini istiyor.
Usta 6--> YUMURTA  SUT  malzemelerini istiyor.
Usta 2--> YUMURTA  UN  malzemelerini istiyor.
Toptancı, malzeme teslim ediyor.
*Usta 4, malzemeleri aldı.
**Usta 4, malzemeleri kullanıyor.
Usta 3--> UN  KAKAO  malzemelerini istiyor.
Usta 5--> SUT  UN  malzemelerini istiyor.
Usta 1--> SUT  KAKAO  malzemelerini istiyor.
***Usta 4, pasta hazırlandı ve usta malzemeleri bıraktı.
Toptancı, pastayı aldı ve satmaya gitti.
Toptancı, malzeme teslim ediyor.
*Usta 6, malzemeleri aldı.
**Usta 6, malzemeleri kullanıyor.
***Usta 6, pasta hazırlandı ve usta malzemeleri bıraktı.
Toptancı, pastayı aldı ve satmaya gitti.
Toptancı, malzeme teslim ediyor.
*Usta 2, malzemeleri aldı.
**Usta 2, malzemeleri kullanıyor.
***Usta 2, pasta hazırlandı ve usta malzemeleri bıraktı.
Toptancı, pastayı aldı ve satmaya gitti.
Toptancı, malzeme teslim ediyor.
*Usta 3, malzemeleri aldı.
**Usta 3, malzemeleri kullanıyor.
***Usta 3, pasta hazırlandı ve usta malzemeleri bıraktı.
Toptancı, pastayı aldı ve satmaya gitti.
Toptancı, malzeme teslim ediyor.
*Usta 5, malzemeleri aldı.
**Usta 5, malzemeleri kullanıyor.
***Usta 5, pasta hazırlandı ve usta malzemeleri bıraktı.
Toptancı, pastayı aldı ve satmaya gitti.
Toptancı, malzeme teslim ediyor.
*Usta 1, malzemeleri aldı.
**Usta 1, malzemeleri kullanıyor.
***Usta 1, pasta hazırlandı ve usta malzemeleri bıraktı.
Toptancı, pastayı aldı ve satmaya gitti.
Toptancı, malzeme teslim ediyor.

-------------------------------------------------------------
8. Bellek Kullanımı, Zombie Süreçleri ve Diğer Sorunların Analizi
-------------------------------------------------------------
	gcc -g -o pastane 170420995_pasta.c
	valgrind --leak-check=yes ./pastane

Sonuç:
	==5829== Memcheck, a memory error detector
	==5829== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
	==5829== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
	==5829== Command: ./pastane
	==5829== 
	Kullanım: ./pastane -i <dosya_adi>
	==5829== 
	==5829== HEAP SUMMARY:
	==5829==     in use at exit: 0 bytes in 0 blocks
	==5829==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
	==5829== 
	==5829== All heap blocks were freed -- no leaks are possible
	==5829== 
	==5829== For lists of detected and suppressed errors, rerun with: -s
	==5829== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
	
Açıklama:
Valgrind aracının ürettiği çıktı, programın bellek kullanımıyla ilgili herhangi bir sorun tespit edilmediğini göstermektedir. Çıktı, programın bellek yönetimi açısından doğru çalıştığını ve bellek sızıntısı veya hatalı bellek kullanımı gibi potansiyel sorunlardan arındığını göstermektedir. Bu sonuçlar, programın sağlıklı bir bellek profilini koruduğunu ve bellek yönetimi konusunda başarılı olduğunu göstermektedir.

-------------------------------------------------------------S
9. Lisans
-------------------------------------------------------------

Bu proje MIT Lisansı ile lisanslanmıştır.
